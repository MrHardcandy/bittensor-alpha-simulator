name: 策略延迟时间对ROI影响测试

on:
  # 手动触发
  workflow_dispatch:
    inputs:
      test_description:
        description: '测试描述'
        required: false
        default: '策略延迟时间影响测试'
  
  # 每周日运行一次
  schedule:
    - cron: '0 2 * * 0'

jobs:
  strategy-delay-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 检出代码
      uses: actions/checkout@v4
    
    - name: 🐍 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install matplotlib seaborn
    
    - name: 🔍 运行策略延迟测试
      run: |
        echo "开始策略延迟测试..."
        python scripts/strategy_delay_test.py
        echo "测试完成！"
    
    - name: 📊 生成HTML报告
      run: |
        echo "生成HTML报告..."
        python scripts/generate_report.py
        echo "报告生成完成！"
    
    - name: 📋 显示测试摘要
      run: |
        echo "=== 测试结果摘要 ==="
        if [ -f test_results/test_summary_*.json ]; then
          latest_summary=$(ls -t test_results/test_summary_*.json | head -1)
          echo "📄 摘要文件: $latest_summary"
          cat "$latest_summary"
        else
          echo "⚠️  未找到测试摘要文件"
        fi
        
        echo ""
        echo "=== 生成的文件 ==="
        ls -la test_results/
    
    - name: 💾 上传测试结果 (Artifacts)
      uses: actions/upload-artifact@v4
      with:
        name: strategy-delay-test-results-${{ github.run_number }}
        path: |
          test_results/*.csv
          test_results/*.json
          test_results/*.html
        retention-days: 30
    
    - name: 🌐 部署到GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      if: github.ref == 'refs/heads/main'
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./test_results
        destination_dir: strategy-delay-reports
        keep_files: false
        commit_message: "📊 更新策略延迟测试报告 - Run #${{ github.run_number }}"
    
    - name: 💬 创建Issue报告
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const fs = require('fs');
          const path = require('path');
          
          // 读取测试摘要
          let summary = {};
          try {
            const summaryFiles = fs.readdirSync('test_results').filter(f => f.startsWith('test_summary_'));
            if (summaryFiles.length > 0) {
              const latestSummary = summaryFiles.sort().pop();
              summary = JSON.parse(fs.readFileSync(`test_results/${latestSummary}`, 'utf8'));
            }
          } catch (error) {
            console.log('无法读取测试摘要:', error);
          }
          
          const runNumber = context.runNumber;
          const workflowUrl = `${context.payload.repository.html_url}/actions/runs/${context.runId}`;
          const pagesUrl = `${context.payload.repository.html_url}/blob/gh-pages/strategy-delay-reports/index.html`;
          const triggerType = context.eventName === 'workflow_dispatch' ? 'Manual' : 'Scheduled';
          
          const issueBody = `
          ## 🎯 策略延迟时间对ROI影响测试报告 #${runNumber}
          
          **测试时间:** ${new Date().toISOString()}
          **触发方式:** ${triggerType}
          
          ### 📊 测试结果摘要
          
          ${summary.total_tests ? `
          - **总测试次数:** ${summary.total_tests}
          - **场景A测试:** ${summary.scenario_a_tests} (1000 TAO)
          - **场景B测试:** ${summary.scenario_b_tests} (2000 TAO)
          
          ### 🏆 最优结果
          
          **场景A (1000 TAO):**
          - 最佳延迟时间: ${summary.scenario_a_best_roi?.delay_days} 天
          - 最高ROI: ${summary.scenario_a_best_roi?.roi_percent?.toFixed(2)}%
          
          **场景B (2000 TAO):**
          - 最佳延迟时间: ${summary.scenario_b_best_roi?.delay_days} 天  
          - 最高ROI: ${summary.scenario_b_best_roi?.roi_percent?.toFixed(2)}%
          ` : '测试数据读取失败'}
          
          ### 📁 查看结果
          
          - 🌐 [在线报告](${pagesUrl})
          - 📥 [下载原始数据](${workflowUrl}) (Artifacts)
          - 🔧 [工作流详情](${workflowUrl})
          
          ### 📋 使用说明
          
          1. **在线查看:** 点击上方"在线报告"链接查看详细的可视化报告
          2. **下载数据:** 在工作流页面下载Artifacts获取CSV和JSON原始数据
          3. **历史对比:** 查看之前的Issue了解历史测试结果
          
          ---
          🤖 此报告由GitHub Actions自动生成
          `;
          
          // 创建Issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `📊 策略延迟测试报告 #${runNumber} - ${new Date().toISOString().split('T')[0]}`,
            body: issueBody,
            labels: ['automated-test', 'strategy-analysis']
          });
    
    - name: ✅ 测试完成通知
      run: |
        echo "🎉 策略延迟时间对ROI影响测试已完成！"
        echo ""
        echo "📊 结果查看方式:"
        echo "1. 在线报告: GitHub Pages (strategy-delay-reports)"
        echo "2. 原始数据: Actions Artifacts"
        echo "3. 摘要报告: 自动创建的Issue"
        echo ""
        echo "💡 提示: 报告可能需要几分钟才能在GitHub Pages上更新"